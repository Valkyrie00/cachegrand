#!/usr/bin/tclsh

package require Tcl 8.5
source helpers.tcl
source server.tcl
source client.tcl
source redis.tcl
source test.tcl

########################
# Suite CFG
########################
set ::tclsh [info nameofexecutable]
set ::dont_clean 1
set ::dump_logs 0
set ::verbose 1
set ::tmpcounter 0
set ::tmproot "./tmp"
file mkdir $::tmproot

########################
# Server
########################
set ::tls 0
set ::srv {}
set ::server_host 127.0.0.1
set ::server_port 6380;
set ::server_pid 0;
set ::external 0; # Set 1 to

set ::socket_host 127.0.0.1
set ::socket_port 21111

set ::portcount 8000; # we don't wanna use more than 10000 to avoid collision with cluster bus ports]
set ::timeout 1200; # 20 minutes without progresses will quit the test.

########################
# Client
########################
set ::client 0
set ::numclients 1

########################
# Tests
########################
set ::test_path "./tests"
set ::num_tests 0
set ::num_passed 0
set ::num_failed 0
set ::num_skipped 0
set ::num_aborted 0
set ::tests_failed {}
set ::cur_test ""
set ::curfile "";
set ::durable 1
set ::skiptests {}
set ::run_solo_tests {}
set ::last_progress [clock seconds]
set ::tags {}

# Index to the next test to run in the ::all_tests list.
set ::next_test 0
set ::all_tests {
    string
    set
}

for {set j 0} {$j < [llength $argv]} {incr j} {
    set opt [lindex $argv $j]
    set arg [lindex $argv [expr $j+1]]
    if {$opt eq {--config}} {
        set arg2 [lindex $argv [expr $j+2]]
        lappend ::global_overrides $arg
        lappend ::global_overrides $arg2
        incr j 2
    } elseif {$opt eq {--host}} {
        set ::external 1
        set ::server_host $arg
        incr j
    } elseif {$opt eq {--port}} {
        set ::server_port $arg
        incr j
    } elseif {$opt eq {--portcount}} {
        set ::portcount $arg
        incr j
    } elseif {$opt eq {--verbose}} {
        set ::verbose 1
    } elseif {$opt eq {--client}} {
        set ::client 1
        set ::socket_port $arg
        incr j
    } elseif {$opt eq {--clients}} {
        set ::numclients $arg
        incr j
    } else {
        puts "Wrong argument: $opt"
        exit 1
    }
}

if {$::client} {
    if {[catch { test_launcher $::socket_port } err]} {
        set estr "Executing test client: $err.\n$::errorInfo"
        if {[catch {send_data_packet $::test_server_fd exception $estr}]} {
            puts $estr
        }
         exit 1
    }

    exit 0
}

puts "************************************************"
puts "** Cachegrand - Commands Redis Tests Launcher **"
puts "- Founded [llength $::all_tests] tests file to run!"
puts "************************************************"
if {[catch { spawn_client } err]} {
    if {[string length $err] > 0} {

        # TODO:
        # only display error when not generated by the test suite
        if {$err ne "exception"} {
            puts $::errorInfo
        }
        exit 1
    }
}
